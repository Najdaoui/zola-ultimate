function zola(){let e={doublePunctuation:[":",";","?","!","\xbb","\xab"],noBreakAfter:[" et"," Et"," ET"," \xe0"," \xc0"," ou"," Ou"," OU"," o\xf9"," O\xf9"," O\xd9"," la"," La"," LA"," le"," Le"," LE"," les"," Les"," LES"," un"," Un"," UN"," une"," Une"," UNE"," des"," Des"," DES"],protectedCombinations:["et la","et le","et les","et un","et une","et des"]};function t(t){let n=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,null,!1),a;for(;a=n.nextNode();){let l=a.nodeValue,r=l;e.protectedCombinations.forEach(e=>{let t=RegExp(`(${e})\\s`,"gi");l=l.replace(t,"$1\xa0")}),e.noBreakAfter.forEach(e=>{let t=RegExp(`(${e.replace(" ","\\s")})\\s`,"g");l=l.replace(t,"$1\xa0")}),e.doublePunctuation.forEach(e=>{l=l.replace(RegExp(`\\s(${o(e)})`,"g"),"\xa0$1")}),l!==r&&(a.nodeValue=l)}}function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}t(document.body);let n=new MutationObserver(e=>{n.disconnect(),e.forEach(e=>{"childList"===e.type&&e.addedNodes.forEach(e=>{e.nodeType===Node.ELEMENT_NODE&&t(e)})}),n.observe(document.body,{childList:!0,subtree:!0})});n.observe(document.body,{childList:!0,subtree:!0})}"complete"===document.readyState?zola():document.addEventListener("DOMContentLoaded",zola,{once:!0});
